package com.droi.reader.model.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.droi.reader.model.bean.CollBookBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLL_BOOK_BEAN".
*/
public class CollBookBeanDao extends AbstractDao<CollBookBean, Long> {

    public static final String TABLENAME = "COLL_BOOK_BEAN";

    /**
     * Properties of entity CollBookBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property Word_count = new Property(3, int.class, "word_count", false, "WORD_COUNT");
        public final static Property Cover = new Property(4, String.class, "cover", false, "COVER");
        public final static Property Brief = new Property(5, String.class, "brief", false, "BRIEF");
        public final static Property Keywords = new Property(6, String.class, "keywords", false, "KEYWORDS");
        public final static Property Complete_status = new Property(7, int.class, "complete_status", false, "COMPLETE_STATUS");
        public final static Property Price = new Property(8, int.class, "price", false, "PRICE");
        public final static Property Isvip = new Property(9, int.class, "isvip", false, "ISVIP");
        public final static Property Create_time = new Property(10, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Category_name = new Property(11, String.class, "category_name", false, "CATEGORY_NAME");
        public final static Property Chapter_count = new Property(12, int.class, "chapter_count", false, "CHAPTER_COUNT");
        public final static Property Start_ad_ts = new Property(13, String.class, "start_ad_ts", false, "START_AD_TS");
        public final static Property End_ad_ts = new Property(14, String.class, "end_ad_ts", false, "END_AD_TS");
        public final static Property Start_vip_ts = new Property(15, String.class, "start_vip_ts", false, "START_VIP_TS");
        public final static Property End_vip_ts = new Property(16, String.class, "end_vip_ts", false, "END_VIP_TS");
        public final static Property LastRead = new Property(17, String.class, "lastRead", false, "LAST_READ");
        public final static Property IsUpdate = new Property(18, boolean.class, "isUpdate", false, "IS_UPDATE");
        public final static Property SpecialChapterPos = new Property(19, int.class, "specialChapterPos", false, "SPECIAL_CHAPTER_POS");
    }

    private DaoSession daoSession;


    public CollBookBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CollBookBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLL_BOOK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"AUTHOR\" TEXT," + // 2: author
                "\"WORD_COUNT\" INTEGER NOT NULL ," + // 3: word_count
                "\"COVER\" TEXT," + // 4: cover
                "\"BRIEF\" TEXT," + // 5: brief
                "\"KEYWORDS\" TEXT," + // 6: keywords
                "\"COMPLETE_STATUS\" INTEGER NOT NULL ," + // 7: complete_status
                "\"PRICE\" INTEGER NOT NULL ," + // 8: price
                "\"ISVIP\" INTEGER NOT NULL ," + // 9: isvip
                "\"CREATE_TIME\" TEXT," + // 10: create_time
                "\"CATEGORY_NAME\" TEXT," + // 11: category_name
                "\"CHAPTER_COUNT\" INTEGER NOT NULL ," + // 12: chapter_count
                "\"START_AD_TS\" TEXT," + // 13: start_ad_ts
                "\"END_AD_TS\" TEXT," + // 14: end_ad_ts
                "\"START_VIP_TS\" TEXT," + // 15: start_vip_ts
                "\"END_VIP_TS\" TEXT," + // 16: end_vip_ts
                "\"LAST_READ\" TEXT," + // 17: lastRead
                "\"IS_UPDATE\" INTEGER NOT NULL ," + // 18: isUpdate
                "\"SPECIAL_CHAPTER_POS\" INTEGER NOT NULL );"); // 19: specialChapterPos
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLL_BOOK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CollBookBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
        stmt.bindLong(4, entity.getWord_count());
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
 
        String brief = entity.getBrief();
        if (brief != null) {
            stmt.bindString(6, brief);
        }
 
        String keywords = entity.getKeywords();
        if (keywords != null) {
            stmt.bindString(7, keywords);
        }
        stmt.bindLong(8, entity.getComplete_status());
        stmt.bindLong(9, entity.getPrice());
        stmt.bindLong(10, entity.getIsvip());
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(11, create_time);
        }
 
        String category_name = entity.getCategory_name();
        if (category_name != null) {
            stmt.bindString(12, category_name);
        }
        stmt.bindLong(13, entity.getChapter_count());
 
        String start_ad_ts = entity.getStart_ad_ts();
        if (start_ad_ts != null) {
            stmt.bindString(14, start_ad_ts);
        }
 
        String end_ad_ts = entity.getEnd_ad_ts();
        if (end_ad_ts != null) {
            stmt.bindString(15, end_ad_ts);
        }
 
        String start_vip_ts = entity.getStart_vip_ts();
        if (start_vip_ts != null) {
            stmt.bindString(16, start_vip_ts);
        }
 
        String end_vip_ts = entity.getEnd_vip_ts();
        if (end_vip_ts != null) {
            stmt.bindString(17, end_vip_ts);
        }
 
        String lastRead = entity.getLastRead();
        if (lastRead != null) {
            stmt.bindString(18, lastRead);
        }
        stmt.bindLong(19, entity.getIsUpdate() ? 1L: 0L);
        stmt.bindLong(20, entity.getSpecialChapterPos());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CollBookBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
        stmt.bindLong(4, entity.getWord_count());
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
 
        String brief = entity.getBrief();
        if (brief != null) {
            stmt.bindString(6, brief);
        }
 
        String keywords = entity.getKeywords();
        if (keywords != null) {
            stmt.bindString(7, keywords);
        }
        stmt.bindLong(8, entity.getComplete_status());
        stmt.bindLong(9, entity.getPrice());
        stmt.bindLong(10, entity.getIsvip());
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(11, create_time);
        }
 
        String category_name = entity.getCategory_name();
        if (category_name != null) {
            stmt.bindString(12, category_name);
        }
        stmt.bindLong(13, entity.getChapter_count());
 
        String start_ad_ts = entity.getStart_ad_ts();
        if (start_ad_ts != null) {
            stmt.bindString(14, start_ad_ts);
        }
 
        String end_ad_ts = entity.getEnd_ad_ts();
        if (end_ad_ts != null) {
            stmt.bindString(15, end_ad_ts);
        }
 
        String start_vip_ts = entity.getStart_vip_ts();
        if (start_vip_ts != null) {
            stmt.bindString(16, start_vip_ts);
        }
 
        String end_vip_ts = entity.getEnd_vip_ts();
        if (end_vip_ts != null) {
            stmt.bindString(17, end_vip_ts);
        }
 
        String lastRead = entity.getLastRead();
        if (lastRead != null) {
            stmt.bindString(18, lastRead);
        }
        stmt.bindLong(19, entity.getIsUpdate() ? 1L: 0L);
        stmt.bindLong(20, entity.getSpecialChapterPos());
    }

    @Override
    protected final void attachEntity(CollBookBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CollBookBean readEntity(Cursor cursor, int offset) {
        CollBookBean entity = new CollBookBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
            cursor.getInt(offset + 3), // word_count
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cover
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // brief
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // keywords
            cursor.getInt(offset + 7), // complete_status
            cursor.getInt(offset + 8), // price
            cursor.getInt(offset + 9), // isvip
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // create_time
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // category_name
            cursor.getInt(offset + 12), // chapter_count
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // start_ad_ts
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // end_ad_ts
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // start_vip_ts
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // end_vip_ts
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // lastRead
            cursor.getShort(offset + 18) != 0, // isUpdate
            cursor.getInt(offset + 19) // specialChapterPos
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CollBookBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWord_count(cursor.getInt(offset + 3));
        entity.setCover(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBrief(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKeywords(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setComplete_status(cursor.getInt(offset + 7));
        entity.setPrice(cursor.getInt(offset + 8));
        entity.setIsvip(cursor.getInt(offset + 9));
        entity.setCreate_time(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCategory_name(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setChapter_count(cursor.getInt(offset + 12));
        entity.setStart_ad_ts(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setEnd_ad_ts(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStart_vip_ts(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setEnd_vip_ts(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLastRead(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIsUpdate(cursor.getShort(offset + 18) != 0);
        entity.setSpecialChapterPos(cursor.getInt(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CollBookBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CollBookBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CollBookBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
